// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`sfc ref transform > $ unwrapping 1`] = `
"import { ref, shallowRef } from 'vue'
    
export default {
  setup(__props, { expose: __expose }) {
  __expose();

    let foo = (ref())
    let a = (ref(1))
    let b = (shallowRef({
      count: 0
    }))
    let c = () => {}
    let d
    
return { foo, a, b, get c() { return c }, set c(v) { c = v }, get d() { return d }, set d(v) { d = v }, ref, shallowRef }
}

}"
`;

exports[`sfc ref transform > $ref & $shallowRef declarations 1`] = `
"import { ref as _ref, shallowRef as _shallowRef } from 'vue'

export default {
  setup(__props, { expose: __expose }) {
  __expose();

    let foo = _ref()
    let a = _ref(1)
    let b = _shallowRef({
      count: 0
    })
    let c = () => {}
    let d
    
return { foo, a, b, get c() { return c }, set c(v) { c = v }, get d() { return d }, set d(v) { d = v } }
}

}"
`;

exports[`sfc ref transform > usage /w typescript 1`] = `
"import { ref as _ref, defineComponent as _defineComponent } from 'vue'

export default /*#__PURE__*/_defineComponent({
  setup(__props, { expose: __expose }) {
  __expose();

        let msg = _ref<string | number>('foo');
        let bar = _ref <string | number>('bar');
      
return { msg, bar }
}

})"
`;

exports[`sfc ref transform > usage in normal <script> 1`] = `
"import { ref as _ref } from 'vue'

    export default {
      setup() {
        let count = _ref(0)
        const inc = () => count.value++
        return ({ count })
      }
    }
    "
`;

exports[`sfc ref transform > usage with normal <script> (has macro usage) + <script setup> (no macro usage) 1`] = `
"import { ref as _ref } from 'vue'

    let data = _ref()
    
export default {
  setup(__props, { expose: __expose }) {
  __expose();

    console.log(data.value)
    
return { data }
}

}"
`;

exports[`sfc ref transform > usage with normal <script> + <script setup> 1`] = `
"import { ref as _ref } from 'vue'

    let a = _ref(0)
    let c = _ref(0)
    
export default {
  setup(__props, { expose: __expose }) {
  __expose();

    let b = _ref(0)
    let c = 0
    function change() {
      a.value++
      b.value++
      c++
    }
    
return { a, c, b, change }
}

}"
`;
